name: Build And Push Docker Release Master

on:
  workflow_dispatch:
    branches: [ "master", "actions" ]
    inputs:
      tag:
        description: tag/version to release
        required: true
jobs:
  build_push_docker_release_master:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: git checkout master
        with:
          ref: master
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: preliminary checks
        run: |
          docker login ghcr.io --username=${{ github.actor }} --password=${{ secrets.GITHUB_TOKEN }}
          set -e
          # fail if templates/generators contain carriage return '\r'
          /bin/bash ./bin/utils/detect_carriage_return.sh
          # fail if generators contain merge conflicts
          /bin/bash ./bin/utils/detect_merge_conflict.sh
          # fail if generators contain tab '\t'
          /bin/bash ./bin/utils/detect_tab_in_java_class.sh
      - uses: s4u/maven-settings-action@v2.8.0
        if: false
        name: setup maven settings.xml
        with:
          servers: |
            [{
                "id": "sonatype-nexus-staging",
                "username": "${{ secrets.OSSRH_USERNAME }}",
                "password": "${{ secrets.OSSRH_TOKEN }}"
            },
            {
                "id": "sonatype-nexus-snapshots",
                "username": "${{ secrets.OSSRH_USERNAME }}",
                "password": "${{ secrets.OSSRH_TOKEN }}"
            }]
      - name: Build with Maven
        run: |
          mvn clean install -U
      - name: Build generator image and push
        uses: docker/build-push-action@v5
        with:
          context: ./modules/swagger-generator
          push: true
          platforms: linux/amd64 #,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          provenance: false
          tags: ghcr.io/arche-noah/swagger-generator:${{ env.TAG }},ghcr.io/arche-noah/swagger-generator:latest
          labels:
            - "org.opencontainers.image.source=https://github.com/arche-noah/swagger-codegen"
      - name: Build CLI image and push
        uses: docker/build-push-action@v5
        with:
          context: ./modules/swagger-codegen-cli
          push: true
          platforms: linux/amd64 #,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          provenance: false
          tags: ghcr.io/arche-noah/swagger-codegen-cli:${{ env.TAG }},ghcr.io/arche-noah/swagger-codegen-cli:latest
          labels:
            - "org.opencontainers.image.source=https://github.com/arche-noah/swagger-codegen"
      - name: deploy
        if: false # don't run on fork
        run: |
          echo "${{ env.TAG }}"

          TOKEN="${{ secrets.RANCHER2_BEARER_TOKEN }}"
          RANCHER_HOST="rancher.tools.swagger.io"
          CLUSTER_ID="c-n8zp2"
          NAMESPACE_NAME="swagger-oss"
          K8S_OBJECT_TYPE="daemonsets"
          K8S_OBJECT_NAME="swagger-generator"
          DEPLOY_IMAGE="arche-noah/swagger--generator:${{ env.TAG }}"

          workloadStatus=""
          getStatus() {
              echo "Getting update status..."
              if ! workloadStatus="$(curl -s -X GET \
                -H "Authorization: Bearer ${TOKEN}" \
                -H 'Content-Type: application/json' \
                "https://${RANCHER_HOST}/k8s/clusters/${CLUSTER_ID}/apis/apps/v1/namespaces/${NAMESPACE_NAME}/${K8S_OBJECT_TYPE}/${K8S_OBJECT_NAME}/status")"
              then
                  echo 'ERROR - get status k8s API call failed!'
                  echo "Exiting build"...
                  exit 1
              fi
          }

          # $1 = image to deploy
          updateObject() {
              local image="${1}"
              echo "Updating image value..."

              if ! curl -s -X PATCH \
                -H "Authorization: Bearer ${TOKEN}" \
                -H 'Content-Type: application/json-patch+json' \
                "https://${RANCHER_HOST}/k8s/clusters/${CLUSTER_ID}/apis/apps/v1/namespaces/${NAMESPACE_NAME}/${K8S_OBJECT_TYPE}/${K8S_OBJECT_NAME}" \
                -d "[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/image\", \"value\": \"${image}\"}]"
              then
                  echo 'ERROR - image update k8s API call failed!'
                  echo "Exiting build..."
                  exit 1
              fi
          }


          # Check that the TAG is valid
          if [[ ${{ env.TAG }} =~ ^[vV]?[0-9]*\.[0-9]*\.[0-9]*$ ]]; then
              echo ""
              echo "This is a Valid TAG..."

              # Get current image/tag in case we need to rollback
              getStatus
              ROLLBACK_IMAGE="$(echo "${workloadStatus}" | jq -r '.spec.template.spec.containers[0].image')"
              echo ""
              echo "Current image: ${ROLLBACK_IMAGE}"

              # Update image and validate response
              echo ""
              updateObject "${DEPLOY_IMAGE}"
              echo ""

              echo ""
              echo "Waiting for pods to start..."
              echo ""
              sleep 60s

              # Get state of the k8s object. If numberReady == desiredNumberScheduled, consider the upgrade successful. Else raise error
              getStatus
                  status="$(echo "${workloadStatus}" | jq '.status')"
              echo ""
              echo "${status}"
              echo ""

              numberDesired="$(echo "${status}" | jq -r '.desiredNumberScheduled')"
              numberReady="$(echo "${status}" | jq -r '.numberReady')"

              if (( numberReady == numberDesired )); then
                  echo "${K8S_OBJECT_NAME} has been upgraded to ${DEPLOY_IMAGE}"

              # If pods are not starting, rollback the upgrade and exit the build with error
              else
                  echo "state = error...rolling back upgrade"
                  updateObject "${ROLLBACK_IMAGE}"
                  echo ""

                  echo ""
                  echo "Waiting for rollback pods to start..."
                  echo ""
                  sleep 60s

                  getStatus
                  status="$(echo "${workloadStatus}" | jq '.status')"
                  echo ""
                  echo "${status}"
                  echo ""

                  numberDesired="$(echo "${status}" | jq -r '.desiredNumberScheduled')"
                  numberReady="$(echo "${status}" | jq -r '.numberReady')"

                  if (( numberReady == numberDesired )); then
                      echo "Rollback to ${ROLLBACK_IMAGE} completed."
                  else
                      echo "FATAL - rollback failed"
                  fi
                  echo "Exiting Build..."
                  exit 1
              fi

          else
              echo "This TAG is not in a valid format..."
              echo "Exiting Build..."
              exit 0
          fi
          echo "Exiting Build..."
          exit 0
    env:
      TAG: ${{ github.event.inputs.tag }}